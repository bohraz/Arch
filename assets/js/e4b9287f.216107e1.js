"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[797],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(n),g=r,h=d["".concat(c,".").concat(g)]||d[g]||u[g]||i;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=g;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1875:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:2},l="Getting Started",o={unversionedId:"Getting Started",id:"Getting Started",title:"Getting Started",description:"Installation",source:"@site/docs/Getting Started.md",sourceDirName:".",slug:"/Getting Started",permalink:"/Arch/docs/Getting Started",draft:!1,editUrl:"https://github.com/bohraz/Arch/edit/main/docs/Getting Started.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"About",permalink:"/Arch/docs/intro"},next:{title:"Core Concepts",permalink:"/Arch/docs/Core Concepts"}},c={},s=[{value:"Installation",id:"installation",level:2},{value:"With Wally",id:"with-wally",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Creating a machine",id:"creating-a-machine",level:3},{value:"Starting the machine and sending events",id:"starting-the-machine-and-sending-events",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started"},"Getting Started"),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("h3",{id:"with-wally"},"With Wally"),(0,r.kt)("p",null,"Simply drop this snippet into wally."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="wally.toml"',title:'"wally.toml"'},'[dependencies]\nArch = "bohraz/arch@0.2.0"\n')),(0,r.kt)("h2",{id:"quick-start"},"Quick Start"),(0,r.kt)("p",null,"The quick start guide will help you get started with Arch. You will learn how to create a single-layer state machine and send events to it."),(0,r.kt)("h3",{id:"creating-a-machine"},"Creating a machine"),(0,r.kt)("p",null,"The simplest way to create a state machine is by passing a table into ",(0,r.kt)("inlineCode",{parentName:"p"},"Arch.createMachine"),". The alternative is to pass a file hierarchy, which is described in later sections."),(0,r.kt)("p",null,"In the following code we create a machine named ",(0,r.kt)("inlineCode",{parentName:"p"},"toggleMachine")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"Active")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Inactive")," states and a ",(0,r.kt)("inlineCode",{parentName:"p"},"toggle")," event that transitions between them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local Arch = require(path.to.Arch)\n\nlocal toggleMachine = Arch.createMachine({\n    id = "toggleMachine",\n    initial = "Inactive",\n\n    states = {\n        Active = {\n            OnEntry = function(context, param1, param2)\n                print("Toggle on!", param1, param2)\n            end,\n            OnExit = function(context)\n                print("Toggle off!")\n            end,\n\n            events = {\n                toggle = "Inactive"\n            }\n        },\n\n        Inactive = {\n            OnInit = function(context)\n                print("Initializing inactive state!")\n            end,\n\n            events = {\n                toggle = "Active"\n            }\n        }\n    }\n})\n')),(0,r.kt)("h3",{id:"starting-the-machine-and-sending-events"},"Starting the machine and sending events"),(0,r.kt)("p",null,"Now, all we have to do is start the machine and send events."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'toggleMachine:Start() --\x3e Initializing inactive state!\ntoggleMachine:Send("toggle", 1, 2) --\x3e Toggle on! 1 2\n')))}u.isMDXComponent=!0}}]);